<?php

/** Урок 11. Интерфейсы и контроль типа */


/** Абстрактные классы создаются добавлением слова 'abstract' перед class
 * Основная задача абстрактных классов - Невозможность создания объекта данного класса
 * Все абстрактные методы Обязательно должны быть определены(объявлены) в дочерних классах
 * Область видимости дочернего метода должны либо совпадать с родительским либо быть лояльнее
 * Параметры дочернего абстракта долны либо совпадать либо быть необязательными ($arg=0)
 */
abstract class Product // создали абстрактный класс
{

    public $name;
    protected $price;

    /**
     * Доступ к таким свойствам получаем через Геттеры и Сеттеры
     * далее закрытое свойство можно передать в конструктор нужного класса посредством публичного метода
     */
    private $discount = 0;  // добавляем свойство для процентальной скидки на товар


    /* опишем конструктор со всеми общими свойствами товаров.*/
    public function __construct($name, $price)
    {
        $this->name = $name;
        $this->price = $price;

    }

    /** Абстрактный метод */
    /*напишем рандомный Абстрактный метод. Далее его надо будет объявить в дочернем классе иначе будет ошибка*/
    abstract protected function addProduct($name, $price);


    /* Пишем метод для получения информации о товаре:
       По умолчанию будет выводить значения свойств для 'notebook' */
    public function getProduct()
    {
        /* просто возвращаем неименованую строку, которую в дальнейшем дополним
        к переменной $out в дочерних классах */
        return "<hr><b>О товаре:</b><br>
                Наименование: {$this->name};<br>
                <!--меняем цену с учётом скидки на товар:-->
                Цена со скидкой: {$this->getPrice()};<br>";
    }

    public function getPrice()
    {
        return $this->price - ($this->discount / 100 * $this->price);
    }

    public function getDiscount(): int /*жестко назначается тип значения*/
    {
        return $this->discount;
    }

    public function setDiscount(int $discount): void
    {
        $this->discount = $discount;
    }

    public function getName()
    {
        return $this->name;
    }


}